package txscript

import (
	"github.com/btcsuite/btcd/btcec"
	"github.com/btcsuite/btcd/wire"
	"testing"
)

var sigHash = wire.ShaHash([32]byte{
	0xc9, 0x97, 0xa5, 0xe5,
	0x6e, 0x10, 0x41, 0x02,
	0xfa, 0x20, 0x9c, 0x6a,
	0x85, 0x2d, 0xd9, 0x06,
	0x60, 0xa2, 0x0b, 0x2d,
	0x9c, 0x35, 0x24, 0x23,
	0xed, 0xce, 0x25, 0x85,
	0x7f, 0xcd, 0x37, 0x04,
})

var privKey, pubKey = btcec.PrivKeyFromBytes(
	btcec.S256(),
	[]byte{
		0x60, 0xa2, 0x0b, 0x2d,
		0xfa, 0x20, 0x9c, 0x6a,
		0xc9, 0x97, 0xa5, 0xe5,
		0x7f, 0xcd, 0x37, 0x04,
		0x6e, 0x10, 0x41, 0x02,
		0x9c, 0x35, 0x24, 0x23,
		0xed, 0xce, 0x25, 0x85,
		0x85, 0x2d, 0xd9, 0x06,
	})

var sig, _ = privKey.Sign(sigHash[:])

// Original sigCache implementation
func BenchmarkSigCacheAdd(b *testing.B) {
	sigCache := NewSigCache(200)
	b.ResetTimer()

	for n := 0; n < b.N; n++ {
		sigCache.Add(sigHash, sig, pubKey)
	}
}

// Optimized implementation suggested by jrick
// func BenchmarkSigCacheAddV1(b *testing.B) {
// 	sigCache := NewSigCacheV2(200)
//
// 	b.ResetTimer()
// 	for n := 0; n < b.N; n++ {
// 		sigCache.Add(sigHash, sig, pubKey)
// 	}
// }
